- первичный ключ единственный в таблице, в отличие от уникального индекса

- индексы полезны когда к таблице есть много запросов формата select ... where name ...
  в индекс следует включать столбцы по которым часто происходит поиск или фильтрация
  
- типы индексов
-- В-дерево:
операции сравнения, between, is null, like привязанный к началу строки
-- хеш индекс:
оператор =
-- GiST-индексы представляют собой не просто разновидность индексов, а инфраструктуру,
позволяющую реализовать много разных стратегий индексирования. Как следствие, GiST-индексы 
могут применяться с разными операторами, в зависимости от стратегии индексирования (класса операторов). 
Например, стандартный дистрибутив Postgres Pro включает классы операторов GiST для нескольких 
двумерных типов геометрических данных
--  SP-GiST позволяет организовывать на диске самые разные несбалансированные структуры данных, 
такие как деревья квадрантов, k-мерные и префиксные деревья. Например, стандартный дистрибутив 
Postgres Pro включает классы операторов SP-GiST для точек в двумерном пространстве
-- GIN-индексы представляют собой «инвертированные индексы», в которых могут содержаться
значения с несколькими ключами, например массивы. Инвертированный индекс содержит отдельный
элемент для значения каждого компонента, и может эффективно работать в запросах, проверяющих 
присутствие определённых значений компонентов.
-- BRIN-индексы (сокращение от Block Range INdexes, Индексы зон блоков) хранят обобщённые сведения 
о значениях, находящихся в физически последовательно расположенных блоках таблицы. Подобно GiST, 
SP-GiST и GIN, индексы BRIN могут поддерживать определённые пользователем стратегии, и в зависимости 
от них применяться с разными операторами. Для типов данных, имеющих линейный порядок сортировки, 
записям в индексе соответствуют минимальные и максимальные значения данных в столбце для каждой зоны блоков.

- фрагментация индекса
Индекс стал «раздутым», то есть в нём оказалось много пустых или почти пустых страниц. 
Это может происходить с B-деревьями в Postgres Pro при определённых, достаточно редких 
сценариях использования. REINDEX даёт возможность сократить объём, занимаемый индексом, 
записывая новую версию индекса без «мёртвых» страниц.

- про порядок столбцов в составных индексах
Составной индекс-B-дерево может применяться в условиях с любым подмножеством столбцов индекса, 
но наиболее эффективен он при ограничениях по ведущим (левым) столбцам. Точное правило состоит 
в том, что сканируемая область индекса определяется условиями равенства с ведущими столбцами и 
условиями неравенства с первым столбцом, не участвующим в условии равенства. Ограничения столбцов
 правее них также проверяются по индексу, так что обращение к таблице откладывается, но на размер 
 сканируемой области индекса это уже не влияет. Например, если есть индекс по столбцам (a, b, c) и 
 условие WHERE a = 5 AND b >= 42 AND c < 77, индекс будет сканироваться от первой записи a = 5 и b = 42 
 до последней с a = 5. Записи индекса, в которых c >= 77, не будут учитываться, но тем не менее будут 
 просканированы. Этот индекс в принципе может использоваться в запросах с ограничениями по b и/или c, 
 без ограничений столбца a, но при этом будет просканирован весь индекс, так что в большинстве случаев
  планировщик предпочтёт использованию индекса полное сканирование таблицы.
  
- наследование
-- наследуются столбцы и ограничения not null и ограничения проверки 
  (не наследуются уникальности, первичный ключ и внешние ключи)
-- по умолчанию выбираются все строки родительской и дочерних талбиц, only меняет поведениеч
-- insert вставляет только в ту таблицу которая указана в запросе 
-- при создании можно использовать like
-- Родительскую таблицу нельзя удалить, пока существуют унаследованные от неё 
--В запросах с наследуемыми таблицами проверка прав доступа выполняется только в родительской таблице. 
Так, например, наличие разрешения UPDATE для таблицы cities подразумевает право на изменение строк и в 
таблице capitals, когда это изменение осуществляется через cities. Тем самым поддерживается видимость того,
 что данные находятся (также) в родительской таблице. Но изменить данные непосредственно в таблице capitals
  нельзя без дополнительного разрешения. Это правило имеет два исключения — команды TRUNCATE и LOCK TABLE, 
  при выполнении которых всегда проверяются разрешения и для дочерних таблиц
-- индексы (включая ограничения уникальности) и ограничения внешних ключей относятся только к 
отдельным таблицам, но не к их потомкам. Это касается обеих сторон ограничений внешних ключей

- секционирование
-- типы: Секционирование по диапазонам, по списку, по хешу

CREATE TABLE measurement (
    city_id         int not null,
    logdate         date not null,
    peaktemp        int,
    unitsales       int
) PARTITION BY RANGE (logdate);
CREATE TABLE measurement_y2006m02 PARTITION OF measurement
    FOR VALUES FROM ('2006-02-01') TO ('2006-03-01');


- ANALYZE собирает статистическую информацию о содержимом таблиц в базе данных и сохраняет результаты 
в системном каталоге pg_statistic. Впоследствии планировщик запросов будет использовать эту статистику 
для выбора наиболее эффективных планов выполнения запросов.


  
  
  

  
  
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  